{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./complaint_update.js","webpack:///./inc/response.js","webpack:///external \"aws-sdk\""],"names":["documentClient","aws","DynamoDB","DocumentClient","main","event","context","callback","data","JSON","parse","body","console","log","type","params","TableName","process","env","COMPLAINTS_TABLE","Key","complaintid","parseInt","pathParameters","UpdateExpression","ExpressionAttributeNames","ExpressionAttributeValues","ReturnValues","update","err","result","failure","status","message","success","TransactItems","Update","officierid","OFFICIERS_TABLE","createSet","toString","transactWrite","buildResponse","statusCode","headers","stringify"],"mappings":"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","file":"complaint_update.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./complaint_update.js\");\n","import aws from 'aws-sdk';\nimport { success, failure } from './inc/response';\nconst documentClient = new aws.DynamoDB.DocumentClient();\n\nexport const main = (event, context, callback) => {\n  \n   const data = JSON.parse(event.body)\n   console.log(data);\n   \n   /*\n        1- approved\n   */\n   if(data.type == 1){\n        const params = {\n                TableName: process.env.COMPLAINTS_TABLE,\n                Key: {\n                    complaintid: parseInt(event.pathParameters.complaintid)\n                },\n                UpdateExpression: `SET #status = :2`,\n                ExpressionAttributeNames:{\n                    '#status': 'status'\n                },\n                ExpressionAttributeValues: {\n                \":2\": 2\n                },\n                ReturnValues: \"ALL_NEW\"\n        };\n\n        documentClient.update(params, (err, result) => {\n                if(err) {\n                    console.log(err);\n                    callback(null , failure({ status: false, message: 'failed to registered complaint' }))\n                } else {\n                    console.log(params)\n                    callback(null, success({status: true, message: 'successfully updated' }))\n                }\n        })\n\n   }\n   // decline complaints\n   else if(data.type === 2){\n        const params = {\n            TableName: process.env.COMPLAINTS_TABLE,\n            Key: {\n                complaintid: parseInt(event.pathParameters.complaintid)\n            },\n            UpdateExpression: `SET #status = :5`,\n            ExpressionAttributeNames:{\n                '#status': 'status'\n            },\n            ExpressionAttributeValues: {\n                \":5\": 5\n            },\n            ReturnValues: \"ALL_NEW\"\n    };\n\n    documentClient.update(params, (err, result) => {\n            if(err) {\n                console.log(err);\n                callback(null , failure({ status: false, message: 'failed to registered complaint' }))\n            } else {\n                console.log(params)\n                callback(null, success({status: true, message: 'successfully deleted' }))\n            }\n    })\n   }\n   // tranfer complaints\n   else if(data.type == 3){\n        const params = {\n            TransactItems: [\n                {\n                    Update: {\n                        TableName: process.env.COMPLAINTS_TABLE,\n                        Key: {\n                            complaintid: parseInt(result.complaintid)\n                        },\n                        UpdateExpression: `SET #officierid = :officierid, #officier_assigned = :officier_assigned, #status = :status`,\n                        ExpressionAttributeNames:{\n                            '#officierid': 'officierid',\n                            '#officier_assigned': 'officier_assigned',\n                            '#status': 'status'\n                        },\n                        ExpressionAttributeValues: {\n                            ':officierid': parseInt(data.officierid),\n                            ':officier_assigned': 1,\n                            ':1': 1\n                        },\n                        ReturnValues: 'ALL_NEW'\n                    }\n                },\n                {\n                    Update: {\n                        TableName: process.env.OFFICIERS_TABLE,\n                        Key: {\n                            officierid: parseInt(data.officierid)\n                        },\n                        UpdateExpression: `ADD #complaints :complaints`,\n                        ExpressionAttributeNames:{\n                            '#complaints': 'complaints'\n                        },\n                        ExpressionAttributeValues: {\n                            ':complaints': documentClient.createSet([data.toString()])\n                        },\n                        ReturnValues: 'ALL_NEW'\n                    }\n                }\n            ]\n        }\n        console.log(params.TransactItems);\n        \n        documentClient.transactWrite(params, (err, result) => {\n            if(err) {\n                console.log(err);\n            } else {\n                console.log(params)\n                callback(null, success({status: true, message: 'successfully transfered' }))\n            }\n        })\n   }\n   \n}","export function success(body) {\n    return buildResponse(200, body);\n  }\n  \n  export function failure(body) {\n    return buildResponse(500, body);\n  }\n  \n  function buildResponse(statusCode, body) {\n    return {\n      statusCode: statusCode,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true\n      },\n      body: JSON.stringify(body)\n    };\n  }\n  ","module.exports = require(\"aws-sdk\");"],"sourceRoot":""}